# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ogDXT2pJmi3OPXM4nVPlbgypjih4rQ5g
"""

from pyspark.sql import SparkSession
from pyspark.sql.types import StructType, StructField, StringType, DoubleType, DateType
from pyspark.sql import functions as F
from datetime import date
# Import Window from pyspark.sql.window
from pyspark.sql.window import Window

# Initialize Spark session
spark = SparkSession.builder.appName("E-commerce Transactions Analysis").getOrCreate()

# Define the schema for the DataFrame
schema = StructType([
    StructField("transaction_id", StringType(), True),
    StructField("user_id", StringType(), True),
    StructField("product_id", StringType(), True),
    StructField("category", StringType(), True),
    StructField("amount", DoubleType(), True),
    StructField("transaction_date", DateType(), True)])

# Create sample data
data = [
    ("T1", "U1", "P1", "Music", 15.0, date(2024, 1, 15)),
    ("T2", "U2", "P2", "Music", 25.0, date(2024, 1, 20)),
    ("T3", "U3", "P3", "Home Appliances", 80.0, date(2024, 2, 1)),
    ("T4", "U4", "P4", "Home Appliances", 150.0, date(2024, 2, 3)),
    ("T5", "U5", "P5", "Health", 45.0, date(2024, 3, 7)),
    ("T6", "U6", "P6", "Health", 60.0, date(2024, 3, 9)),
    ("T7", "U7", "P7", "Gaming", 120.0, date(2024, 4, 1)),
    ("T8", "U8", "P8", "Gaming", 180.0, date(2024, 4, 5)),
    ("T9", "U9", "P9", "Kitchen", 55.0, date(2024, 5, 3)),
    ("T10", "U10", "P10", "Kitchen", 70.0, date(2024, 5, 7)),
]

# Create DataFrame
df = spark.createDataFrame(data, schema)
df.show()

# Calculate total spending amount and average transaction amount per user
spending_df = df.groupBy("user_id").agg(
    F.sum("amount").alias("total_spent"),
    F.avg("amount").alias("avg_transaction")
)
spending_df.show()

# Calculate the most frequently purchased category for each user
favorite_category_df = df.groupBy("user_id", "category") \
    .count() \
    .withColumn("rank", F.row_number().over(
        Window.partitionBy("user_id").orderBy(F.desc("count"))
    )) \
    .filter(F.col("rank") == 1) \
    .select("user_id", F.col("category").alias("favorite_category"))

df.show()

# Join results
result_df = spending_df.join(favorite_category_df, on="user_id", how="left")

# Show the result
result_df.show()
